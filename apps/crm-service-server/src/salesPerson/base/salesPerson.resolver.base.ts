/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesPerson } from "./SalesPerson";
import { SalesPersonCountArgs } from "./SalesPersonCountArgs";
import { SalesPersonFindManyArgs } from "./SalesPersonFindManyArgs";
import { SalesPersonFindUniqueArgs } from "./SalesPersonFindUniqueArgs";
import { CreateSalesPersonArgs } from "./CreateSalesPersonArgs";
import { UpdateSalesPersonArgs } from "./UpdateSalesPersonArgs";
import { DeleteSalesPersonArgs } from "./DeleteSalesPersonArgs";
import { SalesPersonService } from "../salesPerson.service";
@graphql.Resolver(() => SalesPerson)
export class SalesPersonResolverBase {
  constructor(protected readonly service: SalesPersonService) {}

  async _salesPeopleMeta(
    @graphql.Args() args: SalesPersonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesPerson])
  async salesPeople(
    @graphql.Args() args: SalesPersonFindManyArgs
  ): Promise<SalesPerson[]> {
    return this.service.salesPeople(args);
  }

  @graphql.Query(() => SalesPerson, { nullable: true })
  async salesPerson(
    @graphql.Args() args: SalesPersonFindUniqueArgs
  ): Promise<SalesPerson | null> {
    const result = await this.service.salesPerson(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesPerson)
  async createSalesPerson(
    @graphql.Args() args: CreateSalesPersonArgs
  ): Promise<SalesPerson> {
    return await this.service.createSalesPerson({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesPerson)
  async updateSalesPerson(
    @graphql.Args() args: UpdateSalesPersonArgs
  ): Promise<SalesPerson | null> {
    try {
      return await this.service.updateSalesPerson({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesPerson)
  async deleteSalesPerson(
    @graphql.Args() args: DeleteSalesPersonArgs
  ): Promise<SalesPerson | null> {
    try {
      return await this.service.deleteSalesPerson(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
